#!/bin/bash

# üîç Script de Verificaci√≥n Pre-Deploy
# Universidad C√©sar Vallejo Voice Widget

echo "üîç Verificando configuraci√≥n para deploy en Vercel..."
echo "=================================================="
echo ""

# Colores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Contadores
ERRORS=0
WARNINGS=0

# 1. Verificar Node.js
echo "1Ô∏è‚É£ Verificando Node.js..."
if command -v node &> /dev/null; then
    NODE_VERSION=$(node --version)
    echo -e "${GREEN}‚úÖ Node.js instalado: $NODE_VERSION${NC}"
else
    echo -e "${RED}‚ùå Node.js no encontrado${NC}"
    ((ERRORS++))
fi
echo ""

# 2. Verificar package.json
echo "2Ô∏è‚É£ Verificando package.json..."
if [ -f "package.json" ]; then
    echo -e "${GREEN}‚úÖ package.json existe${NC}"
    
    # Verificar scripts
    if grep -q '"build": "vite build"' package.json; then
        echo -e "${GREEN}‚úÖ Script build configurado${NC}"
    else
        echo -e "${RED}‚ùå Script build no encontrado${NC}"
        ((ERRORS++))
    fi
else
    echo -e "${RED}‚ùå package.json no encontrado${NC}"
    ((ERRORS++))
fi
echo ""

# 3. Verificar vite.config.js
echo "3Ô∏è‚É£ Verificando vite.config.js..."
if [ -f "vite.config.js" ]; then
    echo -e "${GREEN}‚úÖ vite.config.js existe${NC}"
else
    echo -e "${RED}‚ùå vite.config.js no encontrado${NC}"
    ((ERRORS++))
fi
echo ""

# 4. Verificar vercel.json
echo "4Ô∏è‚É£ Verificando vercel.json..."
if [ -f "vercel.json" ]; then
    echo -e "${GREEN}‚úÖ vercel.json existe${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  vercel.json no encontrado (opcional)${NC}"
    ((WARNINGS++))
fi
echo ""

# 5. Verificar archivos del widget
echo "5Ô∏è‚É£ Verificando archivos del widget..."
if [ -f "src/voice-widget/main.js" ]; then
    echo -e "${GREEN}‚úÖ main.js existe${NC}"
else
    echo -e "${RED}‚ùå main.js no encontrado${NC}"
    ((ERRORS++))
fi

if [ -f "src/voice-widget/config.js" ]; then
    echo -e "${GREEN}‚úÖ config.js existe${NC}"
else
    echo -e "${RED}‚ùå config.js no encontrado${NC}"
    ((ERRORS++))
fi

if [ -f "src/voice-widget/core.js" ]; then
    echo -e "${GREEN}‚úÖ core.js existe${NC}"
else
    echo -e "${RED}‚ùå core.js no encontrado${NC}"
    ((ERRORS++))
fi

if [ -f "src/voice-widget/ui.js" ]; then
    echo -e "${GREEN}‚úÖ ui.js existe${NC}"
else
    echo -e "${RED}‚ùå ui.js no encontrado${NC}"
    ((ERRORS++))
fi
echo ""

# 6. Verificar CSS
echo "6Ô∏è‚É£ Verificando CSS..."
if [ -f "public/assets/css/voice-widget.css" ]; then
    echo -e "${GREEN}‚úÖ voice-widget.css existe${NC}"
    
    # Verificar colores UCV
    if grep -q "#e30512" public/assets/css/voice-widget.css; then
        echo -e "${GREEN}‚úÖ Color rojo UCV configurado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Color rojo UCV no encontrado${NC}"
        ((WARNINGS++))
    fi
    
    if grep -q "#243659" public/assets/css/voice-widget.css; then
        echo -e "${GREEN}‚úÖ Color azul UCV configurado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Color azul UCV no encontrado${NC}"
        ((WARNINGS++))
    fi
else
    echo -e "${RED}‚ùå voice-widget.css no encontrado${NC}"
    ((ERRORS++))
fi
echo ""

# 7. Verificar Backend API
echo "7Ô∏è‚É£ Verificando Backend API..."
if [ -f "api/server.js" ]; then
    echo -e "${GREEN}‚úÖ server.js existe${NC}"
else
    echo -e "${RED}‚ùå server.js no encontrado${NC}"
    ((ERRORS++))
fi

if [ -f "api/package.json" ]; then
    echo -e "${GREEN}‚úÖ api/package.json existe${NC}"
else
    echo -e "${RED}‚ùå api/package.json no encontrado${NC}"
    ((ERRORS++))
fi

if [ -f "api/vercel.json" ]; then
    echo -e "${GREEN}‚úÖ api/vercel.json existe${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  api/vercel.json no encontrado${NC}"
    ((WARNINGS++))
fi

if [ -f "api/.env.example" ]; then
    echo -e "${GREEN}‚úÖ api/.env.example existe${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  api/.env.example no encontrado${NC}"
    ((WARNINGS++))
fi
echo ""

# 8. Verificar dependencias instaladas
echo "8Ô∏è‚É£ Verificando dependencias..."
if [ -d "node_modules" ]; then
    echo -e "${GREEN}‚úÖ node_modules existe (frontend)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  node_modules no encontrado - ejecuta: npm install${NC}"
    ((WARNINGS++))
fi

if [ -d "api/node_modules" ]; then
    echo -e "${GREEN}‚úÖ node_modules existe (backend)${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  api/node_modules no encontrado - ejecuta: cd api && npm install${NC}"
    ((WARNINGS++))
fi
echo ""

# 9. Test de build
echo "9Ô∏è‚É£ Verificando si el build funciona..."
if npm run build &> /dev/null; then
    echo -e "${GREEN}‚úÖ Build exitoso${NC}"
    if [ -d "dist" ]; then
        echo -e "${GREEN}‚úÖ Carpeta dist generada${NC}"
    fi
else
    echo -e "${RED}‚ùå Build fall√≥ - ejecuta: npm run build${NC}"
    ((ERRORS++))
fi
echo ""

# RESUMEN
echo "=================================================="
echo "üìä RESUMEN"
echo "=================================================="
echo ""

if [ $ERRORS -eq 0 ]; then
    echo -e "${GREEN}‚úÖ SIN ERRORES - Listo para deploy!${NC}"
else
    echo -e "${RED}‚ùå $ERRORS error(es) encontrado(s)${NC}"
fi

if [ $WARNINGS -gt 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  $WARNINGS advertencia(s)${NC}"
fi

echo ""
echo "=================================================="
echo "üöÄ PR√ìXIMOS PASOS PARA DEPLOY"
echo "=================================================="
echo ""

if [ $ERRORS -eq 0 ]; then
    echo "1Ô∏è‚É£ Deploy Frontend:"
    echo "   vercel --prod"
    echo ""
    echo "2Ô∏è‚É£ Deploy Backend:"
    echo "   cd api && vercel --prod"
    echo ""
    echo "3Ô∏è‚É£ Configurar variables de entorno en Vercel Dashboard:"
    echo "   - ELEVENLABS_API_KEY"
    echo "   - ELEVENLABS_AGENT_ID"
    echo "   - ALLOWED_EMBED_DOMAINS"
    echo "   - PORT=3001"
    echo "   - NODE_ENV=production"
    echo ""
    echo "üìñ Ver DEPLOY-VERCEL.md para instrucciones completas"
else
    echo "‚ùå Corrige los errores antes de deployar"
    echo ""
    echo "Comandos √∫tiles:"
    echo "  npm install              # Instalar dependencias frontend"
    echo "  cd api && npm install    # Instalar dependencias backend"
    echo "  npm run build            # Probar build"
fi

echo ""
